// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
	"strings"
)

var (
	favoriteFieldNames          = builder.RawFieldNames(&Favorite{})
	favoriteRows                = strings.Join(favoriteFieldNames, ",")
	favoriteRowsExpectAutoSet   = strings.Join(stringx.Remove(favoriteFieldNames, "`favorite_id`", "`create_time`", "`update_time`"), ",")
	favoriteRowsWithPlaceHolder = strings.Join(stringx.Remove(favoriteFieldNames, "`favorite_id`", "`create_time`", "`update_time`"), "=?,") + "=?"
)

type (
	favoriteModel interface {
		Insert(ctx context.Context, data *Favorite) (sql.Result, error)
		FindOne(ctx context.Context, favoriteId int64) (*Favorite, error)
		Update(ctx context.Context, data *Favorite) error
		Delete(ctx context.Context, favoriteId int64) error
		TransInsert(ctx context.Context, session sqlx.Session, data *Favorite) (sql.Result, error)
		TransDelete(ctx context.Context, session sqlx.Session, userId, videoId int64) error
		TransCtx(ctx context.Context, fn func(ctx context.Context, session sqlx.Session) error) error
		FindFavoriteVideos(ctx context.Context, userId int64) ([]*VideoUser, error)
	}

	defaultFavoriteModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Favorite struct {
		FavoriteId int64 `db:"favorite_id"`
		UserId     int64 `db:"user_id"`
		VideoId    int64 `db:"video_id"`
	}
)

func newFavoriteModel(conn sqlx.SqlConn) *defaultFavoriteModel {
	return &defaultFavoriteModel{
		conn:  conn,
		table: "`favorite`",
	}
}

func (m *defaultFavoriteModel) Insert(ctx context.Context, data *Favorite) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, favoriteRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserId, data.VideoId)
	return ret, err
}

func (m *defaultFavoriteModel) FindOne(ctx context.Context, favoriteId int64) (*Favorite, error) {
	query := fmt.Sprintf("select %s from %s where `favorite_id` = ? limit 1", favoriteRows, m.table)
	var resp Favorite
	err := m.conn.QueryRowCtx(ctx, &resp, query, favoriteId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultFavoriteModel) Update(ctx context.Context, data *Favorite) error {
	query := fmt.Sprintf("update %s set %s where `favorite_id` = ?", m.table, favoriteRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.UserId, data.VideoId, data.FavoriteId)
	return err
}

func (m *defaultFavoriteModel) Delete(ctx context.Context, favoriteId int64) error {
	query := fmt.Sprintf("delete from %s where `favorite_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, favoriteId)
	return err
}

func (m *defaultFavoriteModel) TransInsert(ctx context.Context, session sqlx.Session, data *Favorite) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, favoriteRowsExpectAutoSet)
	ret, err := session.ExecCtx(ctx, query, data.UserId, data.VideoId)
	return ret, err
}

func (m *defaultFavoriteModel) TransDelete(ctx context.Context, session sqlx.Session, userId, videoId int64) error {
	query := fmt.Sprintf("delete from %s where `user_id` = ? and `video_id` = ?", m.table)
	_, err := session.ExecCtx(ctx, query, userId, videoId)
	return err
}

func (m *defaultFavoriteModel) TransCtx(ctx context.Context, fn func(ctx context.Context, session sqlx.Session) error) error {
	return m.conn.TransactCtx(ctx, func(ctx context.Context, s sqlx.Session) error {
		return fn(ctx, s)
	})
}

func (m *defaultFavoriteModel) FindFavoriteVideos(ctx context.Context, userId int64) ([]*VideoUser, error) {
	query := `select v.video_id as video_id, v.create_time as create_time, v.user_id as user_id, play_url, 
				cover_url, favorite_count, comment_count, title, user_name, follow_count, follower_count, 
				0 as is_favorite , ISNULL(r.relation_id) as is_follow 
				from favorite as f 
				JOIN user as u on f.user_id = u.user_id
				JOIN video as v on v.video_id = f.video_id
				LEFT JOIN relation as r on r.followee_id = ? and r.follower_id = f.user_id
				where f.user_id = ?
				order by v.create_time desc`
	var resp []*VideoUser
	err := m.conn.QueryRowsCtx(ctx, &resp, query, userId, userId)
	return resp, err
}

func (m *defaultFavoriteModel) tableName() string {
	return m.table
}
