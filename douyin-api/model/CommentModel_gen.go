// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	commentFieldNames          = builder.RawFieldNames(&Comment{})
	commentRows                = strings.Join(commentFieldNames, ",")
	commentRowsExpectAutoSet   = strings.Join(stringx.Remove(commentFieldNames, "`comment_id`", "`create_time`", "`update_time`"), ",")
	commentRowsWithPlaceHolder = strings.Join(stringx.Remove(commentFieldNames, "`comment_id`", "`create_time`", "`update_time`"), "=?,") + "=?"
)

type (
	commentModel interface {
		Insert(ctx context.Context, data *Comment) (sql.Result, error)
		FindOne(ctx context.Context, commentId int64) (*Comment, error)
		Update(ctx context.Context, data *Comment) error
		Delete(ctx context.Context, commentId int64) error
		FindCommentAndUser(ctx context.Context, userId, commentId int64) (*CommentUser, error)
		FindCommentsByVideoId(ctx context.Context, userId, videoId int64) ([]*CommentUser, error)
		TransInsert(ctx context.Context, session sqlx.Session, data *Comment) (sql.Result, error)
		TransDelete(ctx context.Context, session sqlx.Session, commentId int64) error
		TransCtx(ctx context.Context, fn func(ctx context.Context, session sqlx.Session) error) error
	}

	defaultCommentModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Comment struct {
		CommentId  int64     `db:"comment_id"`
		VideoId    int64     `db:"video_id"`
		UserId     int64     `db:"user_id"`
		Comment    string    `db:"comment"`
		CreateTime time.Time `db:"create_time"`
	}

	CommentUser struct {
		CommentId     int64     `db:"comment_id"`
		UserId        int64     `db:"user_id"`
		Username      string    `db:"user_name"`
		FollowCount   int64     `db:"follow_count"`
		FollowerCount int64     `db:"follower_count"`
		IsFollow      int64     `db:"is_follow"`
		Comment       string    `db:"comment"`
		CreateTime    time.Time `db:"create_time"`
	}
)

func newCommentModel(conn sqlx.SqlConn) *defaultCommentModel {
	return &defaultCommentModel{
		conn:  conn,
		table: "`comment`",
	}
}

func (m *defaultCommentModel) Insert(ctx context.Context, data *Comment) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, commentRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.VideoId, data.UserId, data.Comment)
	return ret, err
}

func (m *defaultCommentModel) FindOne(ctx context.Context, commentId int64) (*Comment, error) {
	query := fmt.Sprintf("select %s from %s where `comment_id` = ? limit 1", commentRows, m.table)
	var resp Comment
	err := m.conn.QueryRowCtx(ctx, &resp, query, commentId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCommentModel) FindCommentAndUser(ctx context.Context, userId, commentId int64) (*CommentUser, error) {
	query := `select comment_id, c.user_id as user_id, user_name, follow_count,
		follower_count, ISNULL(r.relation_id) as is_follow, c.comment as comment, c.create_time
		from comment as c
		Left JOIN user as u on c.user_id = u.user_id
		Left JOIN relation as r on r.follower_id = ? and r.followee_id = c.user_id
		where c.comment_id = ?`

	var resp CommentUser
	err := m.conn.QueryRowCtx(ctx, &resp, query, userId, commentId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCommentModel) Update(ctx context.Context, data *Comment) error {
	query := fmt.Sprintf("update %s set %s where `comment_id` = ?", m.table, commentRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.VideoId, data.UserId, data.Comment, data.CommentId)
	return err
}

func (m *defaultCommentModel) Delete(ctx context.Context, commentId int64) error {
	query := fmt.Sprintf("delete from %s where `comment_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, commentId)
	return err
}

func (m *defaultCommentModel) FindCommentsByVideoId(ctx context.Context, userId, videoId int64) ([]*CommentUser, error) {
	query := `select comment_id, c.user_id as user_id, user_name, follow_count,
		follower_count, ISNULL(r.relation_id) as is_follow, c.comment as comment, c.create_time
		from comment as c
		Left JOIN user as u on c.user_id = u.user_id
		Left JOIN relation as r on r.follower_id = ? and r.followee_id = c.user_id
		where c.video_id = ?
		order by c.create_time desc`
	var resp []*CommentUser
	err := m.conn.QueryRowsCtx(ctx, &resp, query, userId, videoId)
	return resp, err
}

func (m *defaultCommentModel) TransCtx(ctx context.Context, fn func(ctx context.Context, session sqlx.Session) error) error {
	return m.conn.TransactCtx(ctx, func(ctx context.Context, s sqlx.Session) error {
		return fn(ctx, s)
	})
}

func (m *defaultCommentModel) TransInsert(ctx context.Context, session sqlx.Session, data *Comment) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, commentRowsExpectAutoSet)
	ret, err := session.ExecCtx(ctx, query, data.VideoId, data.UserId, data.Comment)
	return ret, err
}

func (m *defaultCommentModel) TransDelete(ctx context.Context, session sqlx.Session, commentId int64) error {
	query := fmt.Sprintf("delete from %s where `comment_id` = ?", m.table)
	_, err := session.ExecCtx(ctx, query, commentId)
	return err
}

func (m *defaultCommentModel) tableName() string {
	return m.table
}
