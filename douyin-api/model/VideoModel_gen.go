// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
	"strings"
	"time"
)

var (
	videoFieldNames          = builder.RawFieldNames(&Video{})
	videoRows                = strings.Join(videoFieldNames, ",")
	videoRowsExpectAutoSet   = strings.Join(stringx.Remove(videoFieldNames, "`video_id`", "`create_time`", "`update_time`"), ",")
	videoRowsWithPlaceHolder = strings.Join(stringx.Remove(videoFieldNames, "`video_id`", "`create_time`", "`update_time`"), "=?,") + "=?"
)

type (
	videoModel interface {
		Insert(ctx context.Context, data *Video) (sql.Result, error)
		FindOne(ctx context.Context, videoId int64) (*Video, error)
		Update(ctx context.Context, data *Video) error
		Delete(ctx context.Context, videoId int64) error
		FindVideosByUserId(ctx context.Context, userId int64) ([]*VideoUser, error)
		FindVideosBefore(ctx context.Context, userId int64, t time.Time) ([]*VideoUser, error)
		TransUpdateCommentCounts(ctx context.Context, session sqlx.Session, videoId int64, favorite bool) error
		TransUpdateFavoriteCounts(ctx context.Context, session sqlx.Session, videoId int64, favorite bool) error
	}

	defaultVideoModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Video struct {
		VideoId       int64     `db:"video_id"`
		CreateTime    time.Time `db:"create_time"`
		UserId        int64     `db:"user_id"`
		PlayUrl       string    `db:"play_url"`
		CoverUrl      string    `db:"cover_url"`
		FavoriteCount int64     `db:"favorite_count"`
		CommentCount  int64     `db:"comment_count"`
		Title         string    `db:"title"`
	}

	VideoUser struct {
		VideoId       int64     `db:"video_id"`
		CreateTime    time.Time `db:"create_time"`
		UserId        int64     `db:"user_id"`
		PlayUrl       string    `db:"play_url"`
		CoverUrl      string    `db:"cover_url"`
		FavoriteCount int64     `db:"favorite_count"`
		CommentCount  int64     `db:"comment_count"`
		Title         string    `db:"title"`
		UserName      string    `db:"user_name"`
		FollowCount   int64     `db:"follow_count"`
		FollowerCount int64     `db:"follower_count"`
		IsFavorite    int64     `db:"is_favorite"`
		IsFollow      int64     `db:"is_follow"`
	}
)

func newVideoModel(conn sqlx.SqlConn) *defaultVideoModel {
	return &defaultVideoModel{
		conn:  conn,
		table: "`video`",
	}
}

func (m *defaultVideoModel) Insert(ctx context.Context, data *Video) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, videoRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserId, data.PlayUrl, data.CoverUrl, data.FavoriteCount, data.CommentCount, data.Title)
	return ret, err
}

func (m *defaultVideoModel) FindOne(ctx context.Context, videoId int64) (*Video, error) {
	query := fmt.Sprintf("select %s from %s where `video_id` = ? limit 1", videoRows, m.table)
	var resp Video
	err := m.conn.QueryRowCtx(ctx, &resp, query, videoId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultVideoModel) Update(ctx context.Context, data *Video) error {
	query := fmt.Sprintf("update %s set %s where `video_id` = ?", m.table, videoRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.UserId, data.PlayUrl, data.CoverUrl, data.FavoriteCount, data.CommentCount, data.Title, data.VideoId)
	return err
}

func (m *defaultVideoModel) Delete(ctx context.Context, videoId int64) error {
	query := fmt.Sprintf("delete from %s where `video_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, videoId)
	return err
}

func (m *defaultVideoModel) FindVideosByUserId(ctx context.Context, userId int64) ([]*VideoUser, error) {
	query := `select v.video_id as video_id, v.create_time as create_time, v.user_id as user_id, play_url, 
				cover_url, favorite_count, comment_count, title, user_name, follow_count, follower_count, 
				ISNULL(f.favorite_id) as is_favorite , ISNULL(r.relation_id) as is_follow 
				from video as v JOIN user as u on v.user_id = u.user_id
				left Join favorite as f on f.video_id = v.video_id and f.user_id = ?
				left join relation as r on r.followee_id = v.user_id and r.follower_id = ?
				where v.user_id = ?
				order by v.create_time desc limit 30`
	var resp []*VideoUser
	err := m.conn.QueryRowsCtx(ctx, &resp, query, userId, userId, userId)
	return resp, err
}

func (m *defaultVideoModel) FindVideosBefore(ctx context.Context, userId int64, t time.Time) ([]*VideoUser, error) {
	query := fmt.Sprintf(`select v.video_id as video_id, v.create_time as create_time, v.user_id as user_id, play_url, 
				cover_url, favorite_count, comment_count, title, user_name, follow_count, follower_count, 
				ISNULL(f.favorite_id) as is_favorite , ISNULL(r.relation_id) as is_follow 
				from video as v JOIN user as u on v.user_id = u.user_id
				left Join favorite as f on f.video_id = v.video_id and f.user_id = %d
				left join relation as r on r.followee_id = v.user_id and r.follower_id = %d
				where v.create_time < ?
				order by v.create_time desc limit 30`, userId, userId)
	if userId == -1 {
		query = `select v.video_id as video_id, v.create_time as create_time, v.user_id as user_id, play_url, 
				cover_url, favorite_count, comment_count, title, user_name, follow_count, follower_count, 
				0 as is_favorite , 0 as is_follow 
				from video as v JOIN user as u on v.user_id = u.user_id
				where v.create_time < ?
				order by v.create_time desc limit 30`
	}
	var resp []*VideoUser
	err := m.conn.QueryRowsCtx(ctx, &resp, query, t.Format("2006-01-02 15:04:05"))
	return resp, err
}

func (m *defaultVideoModel) TransUpdateCommentCounts(ctx context.Context, session sqlx.Session, videoId int64, favorite bool) error {
	query := fmt.Sprintf("update %s set comment_count = comment_count + 1 where `video_id` = ?", m.table)
	if !favorite {
		query = fmt.Sprintf("update %s set comment_count = comment_count - 1 where `video_id` = ?", m.table)
	}
	_, err := session.ExecCtx(ctx, query, videoId)
	return err
}

func (m *defaultVideoModel) TransUpdateFavoriteCounts(ctx context.Context, session sqlx.Session, videoId int64, favorite bool) error {
	query := fmt.Sprintf("update %s set favorite_count = favorite_count + 1 where `video_id` = ?", m.table)
	if !favorite {
		query = fmt.Sprintf("update %s set favorite_count = favorite_count - 1 where `video_id` = ?", m.table)
	}
	_, err := session.ExecCtx(ctx, query, videoId)
	return err
}

func (m *defaultVideoModel) tableName() string {
	return m.table
}
