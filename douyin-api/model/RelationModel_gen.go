// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	relationFieldNames          = builder.RawFieldNames(&Relation{})
	relationRows                = strings.Join(relationFieldNames, ",")
	relationRowsExpectAutoSet   = strings.Join(stringx.Remove(relationFieldNames, "`relation_id`", "`create_time`", "`update_time`"), ",")
	relationRowsWithPlaceHolder = strings.Join(stringx.Remove(relationFieldNames, "`relation_id`", "`create_time`", "`update_time`"), "=?,") + "=?"
)

type (
	relationModel interface {
		Insert(ctx context.Context, data *Relation) (sql.Result, error)
		FindOne(ctx context.Context, relationId int64) (*Relation, error)
		Update(ctx context.Context, data *Relation) error
		Delete(ctx context.Context, relationId int64) error
		TransInsert(ctx context.Context, session sqlx.Session, data *Relation) (sql.Result, error)
		TransDelete(ctx context.Context, session sqlx.Session, followeeId, followerId int64) error
		TransCtx(ctx context.Context, fn func(ctx context.Context, session sqlx.Session) error) error
		FindAllFollowee(ctx context.Context, followerId int64) ([]*RelationUser, error)
		FindAllFollower(ctx context.Context, followeeId int64) ([]*RelationUser, error)
	}

	defaultRelationModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Relation struct {
		RelationId int64     `db:"relation_id"`
		FolloweeId int64     `db:"followee_id"`
		FollowerId int64     `db:"follower_id"`
		CreateTime time.Time `db:"create_time"`
	}
	RelationUser struct {
		UserId        int64  `db:"user_id"`
		UserName      string `db:"user_name"`
		FollowCount   int64  `db:"follow_count"`
		FollowerCount int64  `db:"follower_count"`
		IsFollow      int64  `db:"is_follow"`
	}
)

func newRelationModel(conn sqlx.SqlConn) *defaultRelationModel {
	return &defaultRelationModel{
		conn:  conn,
		table: "`relation`",
	}
}

func (m *defaultRelationModel) Insert(ctx context.Context, data *Relation) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, relationRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.FolloweeId, data.FollowerId)
	return ret, err
}

func (m *defaultRelationModel) FindOne(ctx context.Context, relationId int64) (*Relation, error) {
	query := fmt.Sprintf("select %s from %s where `relation_id` = ? limit 1", relationRows, m.table)
	var resp Relation
	err := m.conn.QueryRowCtx(ctx, &resp, query, relationId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRelationModel) Update(ctx context.Context, data *Relation) error {
	query := fmt.Sprintf("update %s set %s where `relation_id` = ?", m.table, relationRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.FolloweeId, data.FollowerId, data.RelationId)
	return err
}

func (m *defaultRelationModel) FindAllFollower(ctx context.Context, followeeId int64) ([]*RelationUser, error) {
	query := `select u.user_id, u.user_name, u.follow_count, u.follower_count, ISNULL(r2.follower_id) as is_follow
			from relation as r
			JOIN user as u on u.user_id = r.follower_id
			Left JOIN relation as r2 on r2.follower_id = r.followee_id
			where r.followee_id = ?`
	var resp []*RelationUser
	err := m.conn.QueryRowsCtx(ctx, &resp, query, followeeId)
	return resp, err
}

func (m *defaultRelationModel) FindAllFollowee(ctx context.Context, followerId int64) ([]*RelationUser, error) {
	query := `select u.user_id, u.user_name, u.follow_count, u.follower_count, ISNULL(r2.follower_id) as is_follow
			from relation as r
			JOIN user as u on u.user_id = r.followee_id
			Left JOIN relation as r2 on r2.follower_id = r.followee_id
			where r.follower_id = ?`
	var resp []*RelationUser
	err := m.conn.QueryRowsCtx(ctx, &resp, query, followerId)
	return resp, err
}

func (m *defaultRelationModel) Delete(ctx context.Context, relationId int64) error {
	query := fmt.Sprintf("delete from %s where `relation_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, relationId)
	return err
}

func (m *defaultRelationModel) TransInsert(ctx context.Context, session sqlx.Session, data *Relation) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, relationRowsExpectAutoSet)
	ret, err := session.ExecCtx(ctx, query, data.FolloweeId, data.FollowerId)
	return ret, err
}

func (m *defaultRelationModel) TransDelete(ctx context.Context, session sqlx.Session, followeeId, followerId int64) error {
	query := fmt.Sprintf("delete from %s where `followee_id` = ? and `follower_id` = ?", m.table)
	_, err := session.ExecCtx(ctx, query, followeeId, followerId)
	return err
}

func (m *defaultRelationModel) TransCtx(ctx context.Context, fn func(ctx context.Context, session sqlx.Session) error) error {
	return m.conn.TransactCtx(ctx, func(ctx context.Context, s sqlx.Session) error {
		return fn(ctx, s)
	})
}

func (m *defaultRelationModel) tableName() string {
	return m.table
}
